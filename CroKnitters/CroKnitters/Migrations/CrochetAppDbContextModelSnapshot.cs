// <auto-generated />
using System;
using CroKnitters.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CroKnitters.Migrations
{
    [DbContext(typeof(CrochetAppDbContext))]
    partial class CrochetAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CroKnitters.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            Email = "admin1@example.com",
                            Password = "!a123456",
                            Username = "Admin1"
                        },
                        new
                        {
                            AdminId = 2,
                            Email = "admin2@example.com",
                            Password = "!a123456",
                            Username = "Admin2"
                        },
                        new
                        {
                            AdminId = 3,
                            Email = "admin3@example.com",
                            Password = "!a123456",
                            Username = "Admin3"
                        },
                        new
                        {
                            AdminId = 4,
                            Email = "admin4@example.com",
                            Password = "!a123456",
                            Username = "Admin4"
                        });
                });

            modelBuilder.Entity("CroKnitters.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("CityId")
                        .HasName("PK__Cities__F2D21B763291A5A0");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            CityName = "Calgary",
                            ProvinceId = 1
                        },
                        new
                        {
                            CityId = 2,
                            CityName = "Edmonton",
                            ProvinceId = 1
                        },
                        new
                        {
                            CityId = 3,
                            CityName = "Red Deer",
                            ProvinceId = 1
                        },
                        new
                        {
                            CityId = 4,
                            CityName = "Vancouver",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityId = 5,
                            CityName = "Surrey",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityId = 6,
                            CityName = "Victoria",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityId = 7,
                            CityName = "Burnaby",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityId = 8,
                            CityName = "Richmond",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityId = 9,
                            CityName = "Kelowna",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityId = 10,
                            CityName = "Abbotsford",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityId = 11,
                            CityName = "Coquitlam",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityId = 12,
                            CityName = "Saanich",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityId = 13,
                            CityName = "White Rock",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityId = 14,
                            CityName = "Delta",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityId = 15,
                            CityName = "Nanaimo",
                            ProvinceId = 2
                        },
                        new
                        {
                            CityId = 16,
                            CityName = "Winnipeg",
                            ProvinceId = 3
                        },
                        new
                        {
                            CityId = 17,
                            CityName = "Moncton",
                            ProvinceId = 4
                        },
                        new
                        {
                            CityId = 18,
                            CityName = "St. John's",
                            ProvinceId = 5
                        },
                        new
                        {
                            CityId = 19,
                            CityName = "Halifax",
                            ProvinceId = 6
                        },
                        new
                        {
                            CityId = 20,
                            CityName = "Toronto",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 21,
                            CityName = "Ottawa",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 22,
                            CityName = "Hamilton",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 23,
                            CityName = "Mississauga",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 24,
                            CityName = "Brampton",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 25,
                            CityName = "Kitchener",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 26,
                            CityName = "London",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 27,
                            CityName = "Markham",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 28,
                            CityName = "Oshawa",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 29,
                            CityName = "Vaughan",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 30,
                            CityName = "Windsor",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 31,
                            CityName = "St. Catharines",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 32,
                            CityName = "Oakville",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 33,
                            CityName = "Richmond Hill",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 34,
                            CityName = "Burlington",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 35,
                            CityName = "Sudbury",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 36,
                            CityName = "Barrie",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 37,
                            CityName = "Guelph",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 38,
                            CityName = "Whitby",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 39,
                            CityName = "Cambridge",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 40,
                            CityName = "Milton",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 41,
                            CityName = "Ajax",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 42,
                            CityName = "Waterloo",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 43,
                            CityName = "Thunder Bay",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 44,
                            CityName = "Brantford",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 45,
                            CityName = "Chatham",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 46,
                            CityName = "Clarington",
                            ProvinceId = 7
                        },
                        new
                        {
                            CityId = 47,
                            CityName = "Montréal",
                            ProvinceId = 9
                        },
                        new
                        {
                            CityId = 48,
                            CityName = "Quebec City",
                            ProvinceId = 9
                        },
                        new
                        {
                            CityId = 49,
                            CityName = "Laval",
                            ProvinceId = 9
                        },
                        new
                        {
                            CityId = 50,
                            CityName = "Gatineau",
                            ProvinceId = 9
                        },
                        new
                        {
                            CityId = 51,
                            CityName = "Longueuil",
                            ProvinceId = 9
                        },
                        new
                        {
                            CityId = 52,
                            CityName = "Sherbrooke",
                            ProvinceId = 9
                        },
                        new
                        {
                            CityId = 53,
                            CityName = "Lévis",
                            ProvinceId = 9
                        },
                        new
                        {
                            CityId = 54,
                            CityName = "Saguenay",
                            ProvinceId = 9
                        },
                        new
                        {
                            CityId = 55,
                            CityName = "Trois-Rivières",
                            ProvinceId = 9
                        },
                        new
                        {
                            CityId = 56,
                            CityName = "Terrebonne",
                            ProvinceId = 9
                        },
                        new
                        {
                            CityId = 57,
                            CityName = "Saint-Jérôme",
                            ProvinceId = 9
                        },
                        new
                        {
                            CityId = 58,
                            CityName = "Saskatoon",
                            ProvinceId = 10
                        },
                        new
                        {
                            CityId = 59,
                            CityName = "Regina",
                            ProvinceId = 10
                        });
                });

            modelBuilder.Entity("CroKnitters.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("CommentId")
                        .HasName("PK__Comments__C3B4DFCA7D1B4540");

                    b.HasIndex("OwnerId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CroKnitters.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("EventId")
                        .HasName("PK__Events__7944C810EEF9274C");

                    b.HasIndex("OwnerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CroKnitters.Entities.EventUser", b =>
                {
                    b.Property<int>("EventUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventUserId"));

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EventUserId")
                        .HasName("PK__EventUse__75F92483FA2626FC");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("EventUsers");
                });

            modelBuilder.Entity("CroKnitters.Entities.FriendsList", b =>
                {
                    b.Property<int>("ListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListId"));

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ListId")
                        .HasName("PK__FriendsL__E3832805B148DDC9");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("FriendsList", (string)null);
                });

            modelBuilder.Entity("CroKnitters.Entities.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("GroupId")
                        .HasName("PK__Groups__149AF36A0C281B44");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("CroKnitters.Entities.GroupChat", b =>
                {
                    b.Property<int>("GChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GChatId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GChatId"));

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("GChatId")
                        .HasName("PK__GroupCha__75C801E807CEC318");

                    b.HasIndex("GroupId");

                    b.HasIndex("MessageId");

                    b.ToTable("GroupChat", (string)null);
                });

            modelBuilder.Entity("CroKnitters.Entities.GroupUser", b =>
                {
                    b.Property<int>("GroupUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupUserId"));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasDefaultValueSql("('Member')");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupUserId")
                        .HasName("PK__GroupUse__37F70716E0C22569");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupUsers");
                });

            modelBuilder.Entity("CroKnitters.Entities.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("ImageSrc")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("ImageId")
                        .HasName("PK__Images__7516F70CC8F1B07F");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            ImageId = 1,
                            ImageSrc = "https://pbs.twimg.com/profile_images/1654080701292068865/AL2TAeY5_400x400.jpg"
                        },
                        new
                        {
                            ImageId = 2,
                            ImageSrc = "https://i.redd.it/jeuusd992wd41.jpg"
                        },
                        new
                        {
                            ImageId = 3,
                            ImageSrc = "https://images.squarespace-cdn.com/content/v1/5e10bdc20efb8f0d169f85f9/09943d85-b8c7-4d64-af31-1a27d1b76698/arrow.png"
                        },
                        new
                        {
                            ImageId = 4,
                            ImageSrc = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSQV1_mGYXjq3eWha-wQIRkn6ulW9X6Ws-ztw&usqp=CAU"
                        });
                });

            modelBuilder.Entity("CroKnitters.Entities.Language", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LanguageId"));

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("LanguageId")
                        .HasName("PK__Language__B93855ABA45758AD");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CroKnitters.Entities.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("MessageId")
                        .HasName("PK__Messages__C87C0C9C167A84C6");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CroKnitters.Entities.Pattern", b =>
                {
                    b.Property<int>("PatternId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatternId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PatternName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("StitchCount")
                        .HasColumnType("int");

                    b.Property<string>("StitchType")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.HasKey("PatternId")
                        .HasName("PK__Patterns__0A631B521FCBD794");

                    b.HasIndex("AdminId");

                    b.HasIndex("ImageId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Patterns");
                });

            modelBuilder.Entity("CroKnitters.Entities.PatternComment", b =>
                {
                    b.Property<int>("PatComId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatComId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("PatternId")
                        .HasColumnType("int");

                    b.HasKey("PatComId")
                        .HasName("PK__PatternC__272DE03846EEF9E6");

                    b.HasIndex("AdminId");

                    b.HasIndex("CommentId");

                    b.HasIndex("PatternId");

                    b.ToTable("PatternComments");
                });

            modelBuilder.Entity("CroKnitters.Entities.PatternImage", b =>
                {
                    b.Property<int>("PatImId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatImId"));

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("PatternId")
                        .HasColumnType("int");

                    b.HasKey("PatImId")
                        .HasName("PK__PatternI__469D527DA79D41C7");

                    b.HasIndex("ImageId");

                    b.HasIndex("PatternId");

                    b.ToTable("PatternImage");
                });

            modelBuilder.Entity("CroKnitters.Entities.PatternTag", b =>
                {
                    b.Property<int>("PatTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatTagId"));

                    b.Property<int>("PatternId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("PatTagId")
                        .HasName("PK__PatternT__68421DA4E054EE9B");

                    b.HasIndex("PatternId");

                    b.HasIndex("TagId");

                    b.ToTable("PatternTags");
                });

            modelBuilder.Entity("CroKnitters.Entities.Preference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreferenceId"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PreferenceId")
                        .HasName("PK__Preferen__E228496F2600B5A8");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ThemeId");

                    b.HasIndex("UserId");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("CroKnitters.Entities.PrivateChat", b =>
                {
                    b.Property<int>("PChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PChatId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PChatId"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("RecieverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("PChatId")
                        .HasName("PK__PrivateC__752CDBDC8FE2125C");

                    b.HasIndex("MessageId");

                    b.HasIndex("RecieverId");

                    b.HasIndex("SenderId");

                    b.ToTable("PrivateChat", (string)null);
                });

            modelBuilder.Entity("CroKnitters.Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasDefaultValueSql("('In-Progress')");

                    b.HasKey("ProjectId")
                        .HasName("PK__Projects__761ABEF001154132");

                    b.HasIndex("AdminId");

                    b.HasIndex("ImageId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("CroKnitters.Entities.ProjectComment", b =>
                {
                    b.Property<int>("ProComId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProComId"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("ProComId")
                        .HasName("PK__ProjectC__FAF8CB4AAB204E27");

                    b.HasIndex("AdminId");

                    b.HasIndex("CommentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectComments");
                });

            modelBuilder.Entity("CroKnitters.Entities.ProjectImage", b =>
                {
                    b.Property<int>("ProImId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProImId"));

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("ProImId")
                        .HasName("PK__ProjectI__05A6BB15FBD6324F");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectImages");
                });

            modelBuilder.Entity("CroKnitters.Entities.ProjectPattern", b =>
                {
                    b.Property<int>("ProPatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProPatId"));

                    b.Property<int>("PatternId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("ProPatId")
                        .HasName("PK__ProjectP__19B1EB93417F37D9");

                    b.HasIndex("PatternId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPatterns");
                });

            modelBuilder.Entity("CroKnitters.Entities.ProjectTag", b =>
                {
                    b.Property<int>("ProTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProTagId"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProTagId")
                        .HasName("PK__ProjectT__EA3BF1B886EBE45B");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TagId");

                    b.ToTable("ProjectTags");
                });

            modelBuilder.Entity("CroKnitters.Entities.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"));

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProvinceId")
                        .HasName("PK__Province__FD0A6F83F858F43F");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            ProvinceId = 1,
                            ProvinceName = "Alberta"
                        },
                        new
                        {
                            ProvinceId = 2,
                            ProvinceName = "British Columbia"
                        },
                        new
                        {
                            ProvinceId = 3,
                            ProvinceName = "Manitoba"
                        },
                        new
                        {
                            ProvinceId = 4,
                            ProvinceName = "New Brunswick"
                        },
                        new
                        {
                            ProvinceId = 5,
                            ProvinceName = "Newfoundland and Labrador"
                        },
                        new
                        {
                            ProvinceId = 6,
                            ProvinceName = "Nova Scotia"
                        },
                        new
                        {
                            ProvinceId = 7,
                            ProvinceName = "Ontario"
                        },
                        new
                        {
                            ProvinceId = 8,
                            ProvinceName = "Prince Edward Island"
                        },
                        new
                        {
                            ProvinceId = 9,
                            ProvinceName = "Quebec"
                        },
                        new
                        {
                            ProvinceId = 10,
                            ProvinceName = "Saskatchewan"
                        });
                });

            modelBuilder.Entity("CroKnitters.Entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TagId")
                        .HasName("PK__Tags__657CF9ACB4394FA8");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CroKnitters.Entities.Theme", b =>
                {
                    b.Property<int>("ThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThemeId"));

                    b.Property<string>("ThemeTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ThemeId")
                        .HasName("PK__Themes__FBB3E4D98AE98BB3");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("CroKnitters.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4CEBD8424E");

                    b.HasIndex("CityId");

                    b.HasIndex("ImageId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Bio = "Just a guy whose favourite thing is to crochet :).",
                            Email = "samD@example.com",
                            FirstName = "Samuel",
                            ImageId = 1,
                            LastName = "Dane",
                            Password = "!a123456",
                            Username = "Samuel123"
                        },
                        new
                        {
                            UserId = 2,
                            Bio = "Hello there! I like to crochet and knit...",
                            Email = "juliaCrochet@example.com",
                            FirstName = "Julia",
                            ImageId = 2,
                            LastName = "Fernandez",
                            Password = "!a123456",
                            Username = "Julia123"
                        },
                        new
                        {
                            UserId = 3,
                            Bio = "My name is Juan Pablo and I'm exploring this craft as a new hobby.",
                            Email = "Pablo@example.com",
                            FirstName = "Juan",
                            ImageId = 4,
                            LastName = "Pablo",
                            Password = "!a123456",
                            Username = "Juan123"
                        },
                        new
                        {
                            UserId = 4,
                            Bio = "Hello!",
                            Email = "Dsmith@example.com",
                            FirstName = "Delilah",
                            ImageId = 3,
                            LastName = "Smith",
                            Password = "!a123456",
                            Username = "Delilah123"
                        });
                });

            modelBuilder.Entity("CroKnitters.Entities.UserPattern", b =>
                {
                    b.Property<int>("UpatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UpatId"));

                    b.Property<int>("PatternId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UpatId")
                        .HasName("PK__UserPatt__900CF3B8C62046ED");

                    b.HasIndex("PatternId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPatterns");
                });

            modelBuilder.Entity("CroKnitters.Entities.UserProject", b =>
                {
                    b.Property<int>("UproId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UproId"));

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UproId")
                        .HasName("PK__UserProj__1DAD7D9709F4A257");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserProjects");
                });

            modelBuilder.Entity("CroKnitters.Entities.City", b =>
                {
                    b.HasOne("CroKnitters.Entities.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK__Cities__Province__2E1BDC42");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("CroKnitters.Entities.Comment", b =>
                {
                    b.HasOne("CroKnitters.Entities.User", "Owner")
                        .WithMany("Comments")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__Comments__OwnerI__4AB81AF0");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CroKnitters.Entities.Event", b =>
                {
                    b.HasOne("CroKnitters.Entities.User", "Owner")
                        .WithMany("Events")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__Events__OwnerId__34C8D9D1");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CroKnitters.Entities.EventUser", b =>
                {
                    b.HasOne("CroKnitters.Entities.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK__EventUser__Event__68487DD7");

                    b.HasOne("CroKnitters.Entities.User", "User")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__EventUser__UserI__693CA210");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CroKnitters.Entities.FriendsList", b =>
                {
                    b.HasOne("CroKnitters.Entities.User", "Friend")
                        .WithMany("FriendsListFriends")
                        .HasForeignKey("FriendId")
                        .IsRequired()
                        .HasConstraintName("FK__FriendsLi__Frien__3B40CD36");

                    b.HasOne("CroKnitters.Entities.User", "User")
                        .WithMany("FriendsListUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__FriendsLi__UserI__3A4CA8FD");

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CroKnitters.Entities.GroupChat", b =>
                {
                    b.HasOne("CroKnitters.Entities.Group", "Group")
                        .WithMany("GroupChats")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK__GroupChat__Group__31B762FC");

                    b.HasOne("CroKnitters.Entities.Message", "Message")
                        .WithMany("GroupChats")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("FK__GroupChat__Messa__30C33EC3");

                    b.Navigation("Group");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("CroKnitters.Entities.GroupUser", b =>
                {
                    b.HasOne("CroKnitters.Entities.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("FK__GroupUser__Group__40058253");

                    b.HasOne("CroKnitters.Entities.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__GroupUser__UserI__3E1D39E1");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CroKnitters.Entities.Message", b =>
                {
                    b.HasOne("CroKnitters.Entities.User", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK__Messages__Sender__2CF2ADDF");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CroKnitters.Entities.Pattern", b =>
                {
                    b.HasOne("CroKnitters.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CroKnitters.Entities.Image", null)
                        .WithMany("Patterns")
                        .HasForeignKey("ImageId");

                    b.HasOne("CroKnitters.Entities.User", "Owner")
                        .WithMany("Patterns")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__Patterns__OwnerI__3E52440B");

                    b.Navigation("Admin");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CroKnitters.Entities.PatternComment", b =>
                {
                    b.HasOne("CroKnitters.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CroKnitters.Entities.Comment", "Comment")
                        .WithMany("PatternComments")
                        .HasForeignKey("CommentId")
                        .IsRequired()
                        .HasConstraintName("FK__PatternCo__Comme__656C112C");

                    b.HasOne("CroKnitters.Entities.Pattern", "Pattern")
                        .WithMany("PatternComments")
                        .HasForeignKey("PatternId")
                        .IsRequired()
                        .HasConstraintName("FK__PatternCo__Patte__6477ECF3");

                    b.Navigation("Admin");

                    b.Navigation("Comment");

                    b.Navigation("Pattern");
                });

            modelBuilder.Entity("CroKnitters.Entities.PatternImage", b =>
                {
                    b.HasOne("CroKnitters.Entities.Image", "Image")
                        .WithMany("PatternImages")
                        .HasForeignKey("ImageId")
                        .IsRequired()
                        .HasConstraintName("FK__PatternIm__Image__236943A5");

                    b.HasOne("CroKnitters.Entities.Pattern", "Pattern")
                        .WithMany("PatternImages")
                        .HasForeignKey("PatternId")
                        .IsRequired()
                        .HasConstraintName("FK__PatternIm__Patte__22751F6C");

                    b.Navigation("Image");

                    b.Navigation("Pattern");
                });

            modelBuilder.Entity("CroKnitters.Entities.PatternTag", b =>
                {
                    b.HasOne("CroKnitters.Entities.Pattern", "Pattern")
                        .WithMany("PatternTags")
                        .HasForeignKey("PatternId")
                        .IsRequired()
                        .HasConstraintName("FK__PatternTa__Patte__5CD6CB2B");

                    b.HasOne("CroKnitters.Entities.Tag", "Tag")
                        .WithMany("PatternTags")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK__PatternTa__TagId__5DCAEF64");

                    b.Navigation("Pattern");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CroKnitters.Entities.Preference", b =>
                {
                    b.HasOne("CroKnitters.Entities.Language", "Language")
                        .WithMany("Preferences")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK__Preferenc__Langu__38996AB5");

                    b.HasOne("CroKnitters.Entities.Theme", "Theme")
                        .WithMany("Preferences")
                        .HasForeignKey("ThemeId")
                        .IsRequired()
                        .HasConstraintName("FK__Preferenc__Theme__398D8EEE");

                    b.HasOne("CroKnitters.Entities.User", "User")
                        .WithMany("Preferences")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Preferenc__UserI__37A5467C");

                    b.Navigation("Language");

                    b.Navigation("Theme");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CroKnitters.Entities.PrivateChat", b =>
                {
                    b.HasOne("CroKnitters.Entities.Message", "Message")
                        .WithMany("PrivateChats")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("FK__PrivateCh__Messa__367C1819");

                    b.HasOne("CroKnitters.Entities.User", "Reciever")
                        .WithMany("PrivateChatRecievers")
                        .HasForeignKey("RecieverId")
                        .IsRequired()
                        .HasConstraintName("FK__PrivateCh__Recie__3587F3E0");

                    b.HasOne("CroKnitters.Entities.User", "Sender")
                        .WithMany("PrivateChatSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK__PrivateCh__Sende__3493CFA7");

                    b.Navigation("Message");

                    b.Navigation("Reciever");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CroKnitters.Entities.Project", b =>
                {
                    b.HasOne("CroKnitters.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CroKnitters.Entities.Image", null)
                        .WithMany("Projects")
                        .HasForeignKey("ImageId");

                    b.HasOne("CroKnitters.Entities.User", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__Projects__OwnerI__44FF419A");

                    b.Navigation("Admin");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CroKnitters.Entities.ProjectComment", b =>
                {
                    b.HasOne("CroKnitters.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CroKnitters.Entities.Comment", "Comment")
                        .WithMany("ProjectComments")
                        .HasForeignKey("CommentId")
                        .IsRequired()
                        .HasConstraintName("FK__ProjectCo__Comme__619B8048");

                    b.HasOne("CroKnitters.Entities.Project", "Project")
                        .WithMany("ProjectComments")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__ProjectCo__Proje__60A75C0F");

                    b.Navigation("Admin");

                    b.Navigation("Comment");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CroKnitters.Entities.ProjectImage", b =>
                {
                    b.HasOne("CroKnitters.Entities.Image", "Image")
                        .WithMany("ProjectImages")
                        .HasForeignKey("ImageId")
                        .IsRequired()
                        .HasConstraintName("FK__ProjectIm__Image__1F98B2C1");

                    b.HasOne("CroKnitters.Entities.Project", "Project")
                        .WithMany("ProjectImages")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__ProjectIm__Proje__1EA48E88");

                    b.Navigation("Image");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CroKnitters.Entities.ProjectPattern", b =>
                {
                    b.HasOne("CroKnitters.Entities.Pattern", "Pattern")
                        .WithMany("ProjectPatterns")
                        .HasForeignKey("PatternId")
                        .IsRequired()
                        .HasConstraintName("FK__ProjectPa__Patte__5629CD9C");

                    b.HasOne("CroKnitters.Entities.Project", "Project")
                        .WithMany("ProjectPatterns")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__ProjectPa__Proje__5535A963");

                    b.Navigation("Pattern");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("CroKnitters.Entities.ProjectTag", b =>
                {
                    b.HasOne("CroKnitters.Entities.Project", "Project")
                        .WithMany("ProjectTags")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__ProjectTa__Proje__59063A47");

                    b.HasOne("CroKnitters.Entities.Tag", "Tag")
                        .WithMany("ProjectTags")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK__ProjectTa__TagId__59FA5E80");

                    b.Navigation("Project");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("CroKnitters.Entities.User", b =>
                {
                    b.HasOne("CroKnitters.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Users__CityId__30F848ED");

                    b.HasOne("CroKnitters.Entities.Image", "Image")
                        .WithMany("Users")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK__Users__ImageId__31EC6D26");

                    b.Navigation("City");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CroKnitters.Entities.UserPattern", b =>
                {
                    b.HasOne("CroKnitters.Entities.Pattern", "Pattern")
                        .WithMany("UserPatterns")
                        .HasForeignKey("PatternId")
                        .IsRequired()
                        .HasConstraintName("FK__UserPatte__Patte__4E88ABD4");

                    b.HasOne("CroKnitters.Entities.User", "User")
                        .WithMany("UserPatterns")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserPatte__UserI__4D94879B");

                    b.Navigation("Pattern");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CroKnitters.Entities.UserProject", b =>
                {
                    b.HasOne("CroKnitters.Entities.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__UserProje__Proje__52593CB8");

                    b.HasOne("CroKnitters.Entities.User", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserProje__UserI__5165187F");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CroKnitters.Entities.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CroKnitters.Entities.Comment", b =>
                {
                    b.Navigation("PatternComments");

                    b.Navigation("ProjectComments");
                });

            modelBuilder.Entity("CroKnitters.Entities.Event", b =>
                {
                    b.Navigation("EventUsers");
                });

            modelBuilder.Entity("CroKnitters.Entities.Group", b =>
                {
                    b.Navigation("GroupChats");

                    b.Navigation("GroupUsers");
                });

            modelBuilder.Entity("CroKnitters.Entities.Image", b =>
                {
                    b.Navigation("PatternImages");

                    b.Navigation("Patterns");

                    b.Navigation("ProjectImages");

                    b.Navigation("Projects");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CroKnitters.Entities.Language", b =>
                {
                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("CroKnitters.Entities.Message", b =>
                {
                    b.Navigation("GroupChats");

                    b.Navigation("PrivateChats");
                });

            modelBuilder.Entity("CroKnitters.Entities.Pattern", b =>
                {
                    b.Navigation("PatternComments");

                    b.Navigation("PatternImages");

                    b.Navigation("PatternTags");

                    b.Navigation("ProjectPatterns");

                    b.Navigation("UserPatterns");
                });

            modelBuilder.Entity("CroKnitters.Entities.Project", b =>
                {
                    b.Navigation("ProjectComments");

                    b.Navigation("ProjectImages");

                    b.Navigation("ProjectPatterns");

                    b.Navigation("ProjectTags");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("CroKnitters.Entities.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("CroKnitters.Entities.Tag", b =>
                {
                    b.Navigation("PatternTags");

                    b.Navigation("ProjectTags");
                });

            modelBuilder.Entity("CroKnitters.Entities.Theme", b =>
                {
                    b.Navigation("Preferences");
                });

            modelBuilder.Entity("CroKnitters.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("EventUsers");

                    b.Navigation("Events");

                    b.Navigation("FriendsListFriends");

                    b.Navigation("FriendsListUsers");

                    b.Navigation("GroupUsers");

                    b.Navigation("Messages");

                    b.Navigation("Patterns");

                    b.Navigation("Preferences");

                    b.Navigation("PrivateChatRecievers");

                    b.Navigation("PrivateChatSenders");

                    b.Navigation("Projects");

                    b.Navigation("UserPatterns");

                    b.Navigation("UserProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
